{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const loginUser = createAsyncThunk('auth/loginUser', async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('/login', {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    const {\n      status,\n      userId,\n      message\n    } = response.data;\n    if (status === 200 && userId) {\n      return {\n        userId\n      };\n    } else {\n      return rejectWithValue(message || '아이디 또는 비밀번호가 올바르지 않습니다.');\n    }\n  } catch (err) {\n    var _err$response, _err$response$data;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || '서버에 연결할 수 없습니다.');\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isAuthenticated: false,\n    user: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    loginSuccess(state, action) {\n      state.isAuthenticated = true;\n      state.user = action.payload;\n      state.status = 'succeeded';\n      state.error = null;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.status = 'idle';\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.isAuthenticated = true;\n      state.user = {\n        id: action.payload.userId\n      };\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout,\n  loginSuccess\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","loginUser","email","password","rejectWithValue","response","post","headers","withCredentials","status","userId","message","data","err","_err$response","_err$response$data","error","authSlice","name","initialState","isAuthenticated","user","reducers","loginSuccess","state","action","payload","logout","extraReducers","builder","addCase","pending","fulfilled","id","rejected","actions","reducer"],"sources":["/Users/dayeon/Desktop/shuttleplay/Frontend/src/redux/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const loginUser = createAsyncThunk(\n  'auth/loginUser',\n  async ({ email, password }, { rejectWithValue }) => {\n    try {\n      const response = await axios.post('/login', { email, password }, {\n        headers: { 'Content-Type': 'application/json' },\n        withCredentials: true\n      });\n\n      const { status, userId, message } = response.data;\n\n      if (status === 200 && userId) {\n        return { userId };\n      } else {\n        return rejectWithValue(message || '아이디 또는 비밀번호가 올바르지 않습니다.');\n      }\n    } catch (err) {\n      return rejectWithValue(err.response?.data?.error || '서버에 연결할 수 없습니다.');\n    }\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isAuthenticated: false,\n    user: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    loginSuccess(state, action) {\n      state.isAuthenticated = true;\n      state.user = action.payload;\n      state.status = 'succeeded';\n      state.error = null;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.status = 'idle';\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(loginUser.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.isAuthenticated = true;\n        state.user = { id: action.payload.userId };\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { logout, loginSuccess } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}