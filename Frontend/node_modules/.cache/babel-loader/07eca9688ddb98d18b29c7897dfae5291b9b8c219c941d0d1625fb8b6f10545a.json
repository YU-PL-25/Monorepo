{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import axios from'axios';export const loginUser=createAsyncThunk('auth/loginUser',async(_ref,_ref2)=>{let{email,password}=_ref;let{rejectWithValue}=_ref2;try{const response=await axios.post('/login',{email,password},{headers:{'Content-Type':'application/json'},withCredentials:true});const{status,userId,message}=response.data;if(status===200&&userId){return{userId};}else{return rejectWithValue(message||'아이디 또는 비밀번호가 올바르지 않습니다.');}}catch(err){var _err$response,_err$response$data;return rejectWithValue(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.error)||'서버에 연결할 수 없습니다.');}});const authSlice=createSlice({name:'auth',initialState:{isAuthenticated:false,user:null,status:'idle',error:null},reducers:{loginSuccess(state,action){state.isAuthenticated=true;state.user=action.payload;state.status='succeeded';state.error=null;},logout(state){state.isAuthenticated=false;state.user=null;state.status='idle';state.error=null;}},extraReducers:builder=>{builder.addCase(loginUser.pending,state=>{state.status='loading';state.error=null;}).addCase(loginUser.fulfilled,(state,action)=>{state.status='succeeded';state.isAuthenticated=true;state.user={id:action.payload.userId};}).addCase(loginUser.rejected,(state,action)=>{state.status='failed';state.error=action.payload;});}});export const{logout,loginSuccess}=authSlice.actions;export default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","loginUser","_ref","_ref2","email","password","rejectWithValue","response","post","headers","withCredentials","status","userId","message","data","err","_err$response","_err$response$data","error","authSlice","name","initialState","isAuthenticated","user","reducers","loginSuccess","state","action","payload","logout","extraReducers","builder","addCase","pending","fulfilled","id","rejected","actions","reducer"],"sources":["/Users/dayeon/Desktop/shuttleplay/Frontend/src/redux/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const loginUser = createAsyncThunk(\n  'auth/loginUser',\n  async ({ email, password }, { rejectWithValue }) => {\n    try {\n      const response = await axios.post('/login', { email, password }, {\n        headers: { 'Content-Type': 'application/json' },\n        withCredentials: true\n      });\n\n      const { status, userId, message } = response.data;\n\n      if (status === 200 && userId) {\n        return { userId };\n      } else {\n        return rejectWithValue(message || '아이디 또는 비밀번호가 올바르지 않습니다.');\n      }\n    } catch (err) {\n      return rejectWithValue(err.response?.data?.error || '서버에 연결할 수 없습니다.');\n    }\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isAuthenticated: false,\n    user: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    loginSuccess(state, action) {\n      state.isAuthenticated = true;\n      state.user = action.payload;\n      state.status = 'succeeded';\n      state.error = null;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.status = 'idle';\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(loginUser.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.isAuthenticated = true;\n        state.user = { id: action.payload.userId };\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { logout, loginSuccess } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}